/**
 *
 * @module edu.ufl.vra.rest.deployment
 *
 * @version 0.0.0
 *
 * @param {string} deploymentId 
 * @param {string} deploymentName 
 * @param {string} resourceId 
 * @param {string} resourceName 
 * @param {string} configurationPath 
 * @param {string} configurationName 
 * @param {string} configurationAttributeRestHostName 
 * @param {string} configurationAttributeRestHostUsernameName 
 * @param {string} configurationAttributeRestHostPasswordName 
 *
 * @outputType string
 *
 */
function getDeploymentResource(deploymentId, deploymentName, resourceId, resourceName, configurationPath, configurationName, configurationAttributeRestHostName, configurationAttributeRestHostUsernameName, configurationAttributeRestHostPasswordName) {
	var restHost = System.getModule("edu.ufl.vro.configurations").getConfigurationAttribute(configurationPath, configurationName, configurationAttributeRestHostName)
	var token = System.getModule("edu.ufl.vra.authentication").getBearerToken(configurationPath, configurationName, configurationAttributeRestHostName, configurationAttributeRestHostUsernameName, configurationAttributeRestHostPasswordName)
	
	if (!restHost) {
	    throw 'No vRA REST host found'
	}
	if (!token) {
	    throw 'No vRA REST access token found'
	}
	
	if (!deploymentName && !deploymentId) {
	    throw 'No deployment name or id provided'
	}
	
	if (!resourceId && !resourceName) {
	    throw 'No resource name or id provided'
	}
	
	try {
	    if (deploymentName) {
	        deploymentId = JSON.parse(System.getModule("edu.ufl.vra.rest.deployment").getDeployment(null, deploymentName, configurationPath, configurationName, configurationAttributeRestHostName, configurationAttributeRestHostUsernameName, configurationAttributeRestHostPasswordName)).id
	    }
	
	    if (!deploymentId) {
	        throw 'No deployment ID found'
	    }
	    
	    if (resourceName) {
	        var url = '/deployment/api/deployments/' + deploymentId + '/resources'
	    }
	    else {
	        var url = '/deployment/api/deployments/' + deploymentId + '/resources/' + resourceId
	    }
	
	    var request = restHost.createRequest('GET', url)
	
	    request.setHeader('Authorization', 'Bearer ' + token)
	    request.setHeader('Content-Type', 'application/json')
	    request.setHeader('Cache-Control', 'no-cache')
	
	    var response = request.execute()
	
	    if (response.statusCode != 200) {
	        throw response.statusCode
	    }
	
	    if (resourceName) {
	        for each (resource in JSON.parse(response.contentAsString).content) {
	            if (resource.properties.resourceName.toLowerCase() == resourceName.toLowerCase()) {
	                return JSON.stringify(resource)
	            }
	        }
	        throw 'No resource found with name ' + resourceName + ' in deployment ' + deploymentId
	    }
	    else {
	        return response.contentAsString
	    }
	
	    throw 'No resource found with id ' + resourceId + ' in deployment ' + deploymentId
	}
	catch(e) {
	    throw e
	}
}